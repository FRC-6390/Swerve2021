{"version":3,"file":"URDFLoader.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\r\n\r\nfunction URDFColliderClone(...args) {\r\n\r\n    const proto = Object.getPrototypeOf(this);\r\n    const result = proto.clone.call(this, ...args);\r\n    result.isURDFCollider = true;\r\n    return result;\r\n\r\n};\r\n\r\nfunction makeURDFCollider(object) {\r\n\r\n    object.isURDFCollider = true;\r\n    object.clone = URDFColliderClone;\r\n\r\n}\r\n\r\nclass URDFLink extends Object3D {\r\n\r\n    constructor(...args) {\r\n\r\n        super(...args);\r\n        this.isURDFLink = true;\r\n        this.type = 'URDFLink';\r\n        this.urdfNode = null;\r\n\r\n    }\r\n\r\n    copy(source, recursive) {\r\n\r\n        super.copy(source, recursive);\r\n        this.urdfNode = source.urdfNode;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n}\r\n\r\nclass URDFJoint extends Object3D {\r\n\r\n    get jointType() {\r\n\r\n        return this._jointType;\r\n\r\n    }\r\n    set jointType(v) {\r\n\r\n        if (this.jointType === v) return;\r\n        this._jointType = v;\r\n\r\n        switch (v) {\r\n\r\n            case 'fixed':\r\n            case 'continuous':\r\n            case 'revolute':\r\n            case 'prismatic':\r\n                this.jointValue = 0;\r\n                break;\r\n\r\n            case 'planar':\r\n                this.jointValue = new Array(2).fill(0);\r\n                break;\r\n\r\n            case 'floating':\r\n                this.jointValue = new Array(6).fill(0);\r\n                break;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    get angle() {\r\n\r\n        return this.jointValue;\r\n\r\n    }\r\n\r\n    constructor(...args) {\r\n        super(...args);\r\n\r\n        this.isURDFJoint = true;\r\n        this.type = 'URDFJoint';\r\n\r\n        this.urdfNode = null;\r\n        this.jointValue = null;\r\n        this.jointType = 'fixed';\r\n        this.axis = null;\r\n        this.limit = { lower: 0, upper: 0 };\r\n        this.ignoreLimits = false;\r\n\r\n        this.origPosition = null;\r\n        this.origQuaternion = null;\r\n    }\r\n\r\n    /* Overrides */\r\n    copy(source, recursive) {\r\n\r\n        super.copy(source, recursive);\r\n\r\n        this.urdfNode = source.urdfNode;\r\n        this.jointType = source.jointType;\r\n        this.axis = source.axis ? source.axis.clone() : null;\r\n        this.limit.lower = source.limit.lower;\r\n        this.limit.upper = source.limit.upper;\r\n        this.ignoreLimits = false;\r\n\r\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\r\n\r\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\r\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\r\n\r\n        return this;\r\n    }\r\n\r\n    /* Public Functions */\r\n    setAngle(...values) {\r\n        return this.setOffset(...values);\r\n    }\r\n\r\n    setOffset(...values) {\r\n\r\n        values = values.map(v => parseFloat(v));\r\n\r\n        if (!this.origPosition || !this.origQuaternion) {\r\n\r\n            this.origPosition = this.position.clone();\r\n            this.origQuaternion = this.quaternion.clone();\r\n\r\n        }\r\n\r\n        switch (this.jointType) {\r\n\r\n            case 'fixed': {\r\n                break;\r\n            }\r\n            case 'continuous':\r\n            case 'revolute': {\r\n\r\n                let angle = values[0];\r\n                if (angle == null) break;\r\n                if (angle === this.jointValue) break;\r\n\r\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\r\n\r\n                    angle = Math.min(this.limit.upper, angle);\r\n                    angle = Math.max(this.limit.lower, angle);\r\n\r\n                }\r\n\r\n                // FromAxisAngle seems to rotate the opposite of the\r\n                // expected angle for URDF, so negate it here\r\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\r\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\r\n\r\n                this.jointValue = angle;\r\n                this.matrixWorldNeedsUpdate = true;\r\n\r\n                break;\r\n            }\r\n\r\n            case 'prismatic': {\r\n\r\n                let angle = values[0];\r\n                if (angle == null) break;\r\n                if (angle === this.jointValue) break;\r\n\r\n                if (!this.ignoreLimits) {\r\n\r\n                    angle = Math.min(this.limit.upper, angle);\r\n                    angle = Math.max(this.limit.lower, angle);\r\n\r\n                }\r\n\r\n                this.position.copy(this.origPosition);\r\n                this.position.addScaledVector(this.axis, angle);\r\n\r\n                this.jointValue = angle;\r\n                this.worldMatrixNeedsUpdate = true;\r\n                break;\r\n\r\n            }\r\n\r\n            case 'floating':\r\n            case 'planar':\r\n                // TODO: Support these joint types\r\n                console.warn(`'${ this.jointType }' joint not yet supported`);\r\n\r\n        }\r\n\r\n        return this.jointValue;\r\n\r\n    }\r\n\r\n}\r\n\r\nclass URDFRobot extends URDFLink {\r\n\r\n    constructor(...args) {\r\n\r\n        super(...args);\r\n        this.isURDFRobot = true;\r\n        this.urdfNode = null;\r\n\r\n        this.urdfRobotNode = null;\r\n        this.robotName = null;\r\n\r\n        this.links = null;\r\n        this.joints = null;\r\n\r\n    }\r\n\r\n    copy(source, recursive) {\r\n\r\n        super.copy(source, recursive);\r\n\r\n        this.urdfRobotNode = source.urdfRobotNode;\r\n        this.robotName = source.robotName;\r\n\r\n        this.links = {};\r\n        this.joints = {};\r\n\r\n        this.traverse(c => {\r\n\r\n            if (c.isURDFJoint && c.name in source.joints) {\r\n\r\n                this.joints[c.name] = c;\r\n\r\n            }\r\n\r\n            if (c.isURDFLink && c.name in source.links) {\r\n\r\n                this.links[c.name] = c;\r\n\r\n            }\r\n\r\n        });\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    setAngle(jointName, ...angle) {\r\n\r\n        const joint = this.joints[jointName];\r\n        if (joint) {\r\n\r\n            return joint.setAngle(...angle);\r\n\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    setAngles(angles) {\r\n\r\n        // TODO: How to handle other, multi-dimensional joint types?\r\n        for (const name in angles) this.setAngle(name, angles[name]);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { URDFRobot, URDFLink, URDFJoint, makeURDFCollider };\r\n","import * as THREE from 'three';\r\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\r\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\r\nimport { URDFRobot, URDFJoint, URDFLink, makeURDFCollider } from './URDFClasses.js';\r\n\r\n/*\r\nReference coordinate frames for THREE.js and ROS.\r\nBoth coordinate systems are right handed so the URDF is instantiated without\r\nframe transforms. The resulting model can be rotated to rectify the proper up,\r\nright, and forward directions\r\n\r\nTHREE.js\r\n   Y\r\n   |\r\n   |\r\n   .-----X\r\n ／\r\nZ\r\n\r\nROS URDf\r\n       Z\r\n       |   X\r\n       | ／\r\n Y-----.\r\n\r\n*/\r\n\r\nconst tempQuaternion = new THREE.Quaternion();\r\nconst tempEuler = new THREE.Euler();\r\n\r\n// take a vector \"x y z\" and process it into\r\n// an array [x, y, z]\r\nfunction processTuple(val) {\r\n\r\n    if (!val) return [0, 0, 0];\r\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\r\n\r\n}\r\n\r\n// applies a rotation a threejs object in URDF order\r\nfunction applyRotation(obj, rpy, additive = false) {\r\n\r\n    // if additive is true the rotation is applied in\r\n    // addition to the existing rotation\r\n    if (!additive) obj.rotation.set(0, 0, 0);\r\n\r\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\r\n    tempQuaternion.setFromEuler(tempEuler);\r\n    tempQuaternion.multiply(obj.quaternion);\r\n    obj.quaternion.copy(tempQuaternion);\r\n\r\n}\r\n\r\n/* URDFLoader Class */\r\n// Loads and reads a URDF file into a THREEjs Object3D format\r\nexport default\r\nclass URDFLoader {\r\n\r\n    constructor(manager) {\r\n\r\n        this.manager = manager || THREE.DefaultLoadingManager;\r\n        this.loadMeshCb = this.defaultMeshLoader.bind(this);\r\n        this.parseVisual = true;\r\n        this.parseCollision = false;\r\n        this.packages = '';\r\n        this.workingPath = '';\r\n        this.fetchOptions = null;\r\n\r\n    }\r\n\r\n    /* Public API */\r\n    // urdf:    The path to the URDF within the package OR absolute\r\n    // onComplete:      Callback that is passed the model once loaded\r\n    load(urdf, onComplete, onProgress, onError) {\r\n\r\n        // Check if a full URI is specified before\r\n        // prepending the package info\r\n        const manager = this.manager;\r\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\r\n        const urdfPath = this.manager.resolveURL(urdf);\r\n\r\n        manager.itemStart(urdfPath);\r\n        fetch(urdfPath, this.fetchOptions)\r\n            .then(res => {\r\n                if (onProgress) {\r\n                    onProgress(null);\r\n                }\r\n                return res.text();\r\n            })\r\n            .then(data => {\r\n\r\n                if (this.workingPath === '') {\r\n\r\n                    this.workingPath = workingPath;\r\n\r\n                }\r\n\r\n                const model = this.parse(data);\r\n                onComplete(model);\r\n                manager.itemEnd(urdfPath);\r\n\r\n            })\r\n            .catch(e => {\r\n\r\n                if (onError) {\r\n                    onError(e);\r\n                } else {\r\n                    console.error('URDFLoader: Error loading file.', e);\r\n                }\r\n                manager.itemError(urdfPath);\r\n                manager.itemEnd(urdfPath);\r\n\r\n            });\r\n\r\n    }\r\n\r\n    parse(content) {\r\n\r\n        const packages = this.packages;\r\n        const loadMeshCb = this.loadMeshCb;\r\n        const parseVisual = this.parseVisual;\r\n        const parseCollision = this.parseCollision;\r\n        const workingPath = this.workingPath;\r\n        const manager = this.manager;\r\n        const linkMap = {};\r\n        const jointMap = {};\r\n        const materialMap = {};\r\n\r\n        // Resolves the path of mesh files\r\n        function resolvePath(path) {\r\n\r\n            if (!/^package:\\/\\//.test(path)) {\r\n\r\n                return workingPath ? workingPath + path : path;\r\n\r\n            }\r\n\r\n            // Remove \"package://\" keyword and split meshPath at the first slash\r\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\r\n\r\n            if (typeof packages === 'string') {\r\n\r\n                // \"pkg\" is one single package\r\n                if (packages.endsWith(targetPkg)) {\r\n\r\n                    // \"pkg\" is the target package\r\n                    return packages + '/' + relPath;\r\n\r\n                } else {\r\n\r\n                    // Assume \"pkg\" is the target package's parent directory\r\n                    return packages + '/' + targetPkg + '/' + relPath;\r\n\r\n                }\r\n\r\n            } else if (typeof packages === 'object') {\r\n\r\n                // \"pkg\" is a map of packages\r\n                if (targetPkg in packages) {\r\n\r\n                    return packages[targetPkg] + '/' + relPath;\r\n\r\n                } else {\r\n\r\n                    console.error(`URDFLoader : ${ targetPkg } not found in provided package list.`);\r\n                    return null;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // Process the URDF text format\r\n        function processUrdf(data) {\r\n\r\n            let children;\r\n            if (data instanceof Document) {\r\n\r\n                children = [ ...data.children ];\r\n\r\n            } else if (data instanceof Element) {\r\n\r\n                children = [ data ];\r\n\r\n            } else {\r\n\r\n                const parser = new DOMParser();\r\n                const urdf = parser.parseFromString(data, 'text/xml');\r\n                children = [ ...urdf.children ];\r\n\r\n            }\r\n\r\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\r\n            return processRobot(robotNode);\r\n\r\n        }\r\n\r\n        // Process the <robot> node\r\n        function processRobot(robot) {\r\n\r\n            const robotNodes = [ ...robot.children ];\r\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\r\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\r\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\r\n            const obj = new URDFRobot();\r\n\r\n            obj.robotName = robot.getAttribute('name');\r\n            obj.urdfRobotNode = robot;\r\n\r\n            // Create the <material> map\r\n            materials.forEach(m => {\r\n\r\n                const name = m.getAttribute('name');\r\n                materialMap[name] = processMaterial(m);\r\n\r\n            });\r\n\r\n            // Create the <link> map\r\n            links.forEach(l => {\r\n\r\n                const name = l.getAttribute('name');\r\n                const isRoot = robot.querySelector(`child[link=\"${ name }\"]`) === null;\r\n                linkMap[name] = processLink(l, isRoot ? obj : null);\r\n\r\n            });\r\n\r\n            // Create the <joint> map\r\n            joints.forEach(j => {\r\n\r\n                const name = j.getAttribute('name');\r\n                jointMap[name] = processJoint(j);\r\n\r\n            });\r\n\r\n            obj.joints = jointMap;\r\n            obj.links = linkMap;\r\n\r\n            return obj;\r\n\r\n        }\r\n\r\n        // Process joint nodes and parent them\r\n        function processJoint(joint) {\r\n\r\n            const children = [ ...joint.children ];\r\n            const jointType = joint.getAttribute('type');\r\n            const obj = new URDFJoint();\r\n            obj.urdfNode = joint;\r\n            obj.name = joint.getAttribute('name');\r\n            obj.jointType = jointType;\r\n\r\n            let parent = null;\r\n            let child = null;\r\n            let xyz = [0, 0, 0];\r\n            let rpy = [0, 0, 0];\r\n\r\n            // Extract the attributes\r\n            children.forEach(n => {\r\n\r\n                const type = n.nodeName.toLowerCase();\r\n                if (type === 'origin') {\r\n\r\n                    xyz = processTuple(n.getAttribute('xyz'));\r\n                    rpy = processTuple(n.getAttribute('rpy'));\r\n\r\n                } else if (type === 'child') {\r\n\r\n                    child = linkMap[n.getAttribute('link')];\r\n\r\n                } else if (type === 'parent') {\r\n\r\n                    parent = linkMap[n.getAttribute('link')];\r\n\r\n                } else if (type === 'limit') {\r\n\r\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\r\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\r\n\r\n                }\r\n\r\n            });\r\n\r\n            // Join the links\r\n            parent.add(obj);\r\n            obj.add(child);\r\n            applyRotation(obj, rpy);\r\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\r\n\r\n            // Set up the rotate function\r\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\r\n\r\n            if (axisNode) {\r\n\r\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\r\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\r\n                obj.axis.normalize();\r\n\r\n            }\r\n\r\n            return obj;\r\n\r\n        }\r\n\r\n        // Process the <link> nodes\r\n        function processLink(link, target = null) {\r\n\r\n            if (target === null) {\r\n\r\n                target = new URDFLink();\r\n\r\n            }\r\n\r\n            const children = [ ...link.children ];\r\n            target.name = link.getAttribute('name');\r\n            target.urdfNode = link;\r\n\r\n            if (parseVisual) {\r\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\r\n                visualNodes.forEach(vn => processLinkElement(vn, target, materialMap));\r\n            }\r\n            if (parseCollision) {\r\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\r\n                collisionNodes.forEach(vn => processLinkElement(vn, target));\r\n            }\r\n\r\n            return target;\r\n\r\n        }\r\n\r\n        function processMaterial(node) {\r\n\r\n            const matNodes = [ ...node.children ];\r\n            const material = new THREE.MeshPhongMaterial();\r\n\r\n            material.name = node.getAttribute('name') || '';\r\n            matNodes.forEach(n => {\r\n\r\n                const type = n.nodeName.toLowerCase();\r\n                if (type === 'color') {\r\n\r\n                    const rgba =\r\n                        n\r\n                            .getAttribute('rgba')\r\n                            .split(/\\s/g)\r\n                            .map(v => parseFloat(v));\r\n\r\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\r\n                    material.opacity = rgba[3];\r\n                    material.transparent = rgba[3] < 1;\r\n\r\n                } else if (type === 'texture') {\r\n\r\n                    // The URDF spec does not require that the <texture/> tag include\r\n                    // a filename attribute so skip loading the texture if not provided.\r\n                    const filename = n.getAttribute('filename');\r\n                    if (filename) {\r\n\r\n                        const loader = new THREE.TextureLoader(manager);\r\n                        const filePath = resolvePath(filename);\r\n                        material.map = loader.load(filePath);\r\n\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            return material;\r\n\r\n        }\r\n\r\n        // Process the visual and collision nodes into meshes\r\n        function processLinkElement(vn, linkObj, materialMap = {}) {\r\n\r\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\r\n            let xyz = [0, 0, 0];\r\n            let rpy = [0, 0, 0];\r\n            let scale = [1, 1, 1];\r\n\r\n            const children = [ ...vn.children ];\r\n            let material = null;\r\n            let primitiveModel = null;\r\n\r\n            // get the material first\r\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\r\n            if (materialNode) {\r\n\r\n                const name = materialNode.getAttribute('name');\r\n                if (name && name in materialMap) {\r\n\r\n                    material = materialMap[name];\r\n\r\n                } else {\r\n\r\n                    material = processMaterial(materialNode);\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                material = new THREE.MeshPhongMaterial();\r\n\r\n            }\r\n\r\n            children.forEach(n => {\r\n\r\n                const type = n.nodeName.toLowerCase();\r\n                if (type === 'geometry') {\r\n\r\n                    const geoType = n.children[0].nodeName.toLowerCase();\r\n                    if (geoType === 'mesh') {\r\n\r\n                        const filename = n.children[0].getAttribute('filename');\r\n                        const filePath = resolvePath(filename);\r\n\r\n                        // file path is null if a package directory is not provided.\r\n                        if (filePath !== null) {\r\n\r\n                            const scaleAttr = n.children[0].getAttribute('scale');\r\n                            if (scaleAttr) scale = processTuple(scaleAttr);\r\n\r\n                            loadMeshCb(filePath, manager, (obj, err) => {\r\n\r\n                                if (err) {\r\n\r\n                                    console.error('URDFLoader: Error loading mesh.', err);\r\n\r\n                                } else if (obj) {\r\n\r\n                                    if (obj instanceof THREE.Mesh) {\r\n\r\n                                        obj.material = material;\r\n\r\n                                    }\r\n\r\n                                    linkObj.add(obj);\r\n\r\n                                    obj.position.set(xyz[0], xyz[1], xyz[2]);\r\n                                    obj.rotation.set(0, 0, 0);\r\n\r\n                                    // multiply the existing scale by the scale components because\r\n                                    // the loaded model could have important scale values already applied\r\n                                    // to the root. Collada files, for example, can load in with a scale\r\n                                    // to convert the model units to meters.\r\n                                    obj.scale.x *= scale[0];\r\n                                    obj.scale.y *= scale[1];\r\n                                    obj.scale.z *= scale[2];\r\n\r\n                                    applyRotation(obj, rpy);\r\n\r\n                                    if (isCollisionNode) {\r\n\r\n                                        makeURDFCollider(obj);\r\n\r\n                                    }\r\n\r\n                                }\r\n\r\n                            });\r\n\r\n                        }\r\n\r\n                    } else if (geoType === 'box') {\r\n\r\n                        primitiveModel = new THREE.Mesh();\r\n                        primitiveModel.geometry = new THREE.BoxBufferGeometry(1, 1, 1);\r\n                        primitiveModel.material = material;\r\n\r\n                        const size = processTuple(n.children[0].getAttribute('size'));\r\n\r\n                        linkObj.add(primitiveModel);\r\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\r\n\r\n                        if (isCollisionNode) {\r\n\r\n                            makeURDFCollider(primitiveModel);\r\n\r\n                        }\r\n\r\n                    } else if (geoType === 'sphere') {\r\n\r\n                        primitiveModel = new THREE.Mesh();\r\n                        primitiveModel.geometry = new THREE.SphereBufferGeometry(1, 30, 30);\r\n                        primitiveModel.material = material;\r\n\r\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\r\n                        primitiveModel.scale.set(radius, radius, radius);\r\n\r\n                        linkObj.add(primitiveModel);\r\n\r\n                        if (isCollisionNode) {\r\n\r\n                            makeURDFCollider(primitiveModel);\r\n\r\n                        }\r\n\r\n                    } else if (geoType === 'cylinder') {\r\n\r\n                        primitiveModel = new THREE.Mesh();\r\n                        primitiveModel.geometry = new THREE.CylinderBufferGeometry(1, 1, 1, 30);\r\n                        primitiveModel.material = material;\r\n\r\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\r\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\r\n                        primitiveModel.scale.set(radius, length, radius);\r\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\r\n\r\n                        linkObj.add(primitiveModel);\r\n\r\n                        if (isCollisionNode) {\r\n\r\n                            makeURDFCollider(primitiveModel);\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if (type === 'origin') {\r\n\r\n                    xyz = processTuple(n.getAttribute('xyz'));\r\n                    rpy = processTuple(n.getAttribute('rpy'));\r\n\r\n                }\r\n\r\n            });\r\n\r\n            // apply the position and rotation to the primitive geometry after\r\n            // the fact because it's guaranteed to have been scraped from the child\r\n            // nodes by this point\r\n            if (primitiveModel) {\r\n\r\n                applyRotation(primitiveModel, rpy, true);\r\n                primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return processUrdf(content);\r\n\r\n    }\r\n\r\n    // Default mesh loading function\r\n    defaultMeshLoader(path, manager, done) {\r\n\r\n        if (/\\.stl$/i.test(path)) {\r\n\r\n            const loader = new STLLoader(manager);\r\n            loader.load(path, geom => {\r\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\r\n                done(mesh);\r\n            });\r\n\r\n        } else if (/\\.dae$/i.test(path)) {\r\n\r\n            const loader = new ColladaLoader(manager);\r\n            loader.load(path, dae => done(dae.scene));\r\n\r\n        } else {\r\n\r\n            console.warn(`URDFLoader: Could not load model at ${ path }.\\nNo loader available`);\r\n\r\n        }\r\n\r\n    }\r\n\r\n};\r\n"],"names":["Object3D","Quaternion","THREE.Quaternion","THREE.Euler","THREE.DefaultLoadingManager","THREE.LoaderUtils","THREE.Vector3","THREE.MeshPhongMaterial","THREE.TextureLoader","THREE.Mesh","THREE.BoxBufferGeometry","THREE.SphereBufferGeometry","THREE.CylinderBufferGeometry","STLLoader","ColladaLoader"],"mappings":"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"}