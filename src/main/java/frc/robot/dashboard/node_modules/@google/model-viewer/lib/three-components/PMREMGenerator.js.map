{"version":3,"file":"PMREMGenerator.js","sourceRoot":"","sources":["../../src/three-components/PMREMGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BufferAttribute, BufferGeometry, CubeUVReflectionMapping, LinearEncoding, LinearToneMapping, Mesh, NearestFilter, NoBlending, OrthographicCamera, PerspectiveCamera, RawShaderMaterial, RGBEEncoding, RGBEFormat, Scene, Texture, UnsignedByteType, Vector2, Vector3, WebGLRenderer, WebGLRenderTarget} from 'three';\n\nimport EnvironmentScene from './EnvironmentScene.js';\nimport {encodings, getDirectionChunk, texelIO} from './shader-chunk/common.glsl.js';\nimport {bilinearCubeUVChunk} from './shader-chunk/cube_uv_reflection_fragment.glsl.js';\n\nconst LOD_MIN = 4;\nconst LOD_MAX = 8;\n// The roughness values associated with the extra mips. These must match\n// varianceDefines from common.glsl.js.\nconst EXTRA_LOD_ROUGHNESS = [0.305, 0.4, 0.533, 0.666, 0.8, 1.0];\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function.\nconst EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\nconst SIZE_MAX = Math.pow(2, LOD_MAX);\nconst TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_ROUGHNESS.length;\n\n// Number of standard deviations at which to cut off the discrete approximation.\nconst STANDARD_DEVIATIONS = 3;\n// The maximum length of the blur for loop, chosen to equal the number needed\n// for GENERATED_SIGMA. Smaller sigmas will use fewer samples and exit early,\n// but not recompile the shader.\nconst MAX_SAMPLES = 20;\nconst GENERATED_SIGMA = 0.04;\nconst DEFAULT_NEAR = 0.1;\nconst DEFAULT_FAR = 100;\n// Golden Ratio\nconst PHI = (1 + Math.sqrt(5)) / 2;\nconst INV_PHI = 1 / PHI;\n\nconst $roughness = Symbol('roughness');\nconst $sigma = Symbol('sigma');\nconst $sizeLod = Symbol('sizeLod');\nconst $lodPlanes = Symbol('lodPlanes');\nconst $axisDirections = Symbol('axisDirections');\nconst $blurMaterial = Symbol('blurMaterial');\nconst $flatCamera = Symbol('flatCamera');\nconst $pingPongRenderTarget = Symbol('pingPongRenderTarget');\n\nconst $allocateTargets = Symbol('allocateTargets');\nconst $sceneToCubeUV = Symbol('sceneToCubeUV');\nconst $equirectangularToCubeUV = Symbol('equirectangularToCubeUV');\nconst $createRenderTarget = Symbol('createRenderTarget');\nconst $setViewport = Symbol('setViewport');\nconst $applyPMREM = Symbol('applyPMREM');\nconst $blur = Symbol('blur');\nconst $halfBlur = Symbol('halfBlur');\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n */\n\nexport class PMREMGenerator {\n  // These arrays will each be TOTAL_LODS in length, each referring to a 'mip'.\n  private[$roughness]: Array<number> = [];\n  private[$sigma]: Array<number> = [];\n  private[$sizeLod]: Array<number> = [];\n  private[$lodPlanes]: Array<BufferGeometry> = [];\n  private[$axisDirections]: Array<Vector3> = [];\n\n  private[$blurMaterial] = new BlurMaterial(MAX_SAMPLES);\n  private[$flatCamera] = new OrthographicCamera(0, 1, 0, 1, 0, 1);\n  private[$pingPongRenderTarget]: WebGLRenderTarget;\n\n  constructor(private threeRenderer: WebGLRenderer) {\n    let lod = LOD_MAX;\n    for (let i = 0; i < TOTAL_LODS; i++) {\n      const sizeLod = Math.pow(2, lod);\n      this[$sizeLod].push(sizeLod);\n      let sigma = 1.0 / sizeLod;\n      let roughness =\n          (1 + Math.sqrt(1 + 4 * Math.PI * sizeLod)) / (2 * Math.PI * sizeLod);\n      if (i > LOD_MAX - LOD_MIN) {\n        roughness = EXTRA_LOD_ROUGHNESS[i - LOD_MAX + LOD_MIN - 1];\n        sigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n      } else if (i == 0) {\n        sigma = 0;\n      }\n      this[$sigma].push(sigma);\n      this[$roughness].push(roughness);\n\n      const texelSize = 1.0 / (sizeLod - 1);\n      const min = -texelSize / 2;\n      const max = 1 + texelSize / 2;\n      const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\n      const cubeFaces = 6;\n      const vertices = 6;\n      const positionSize = 3;\n      const uvSize = 2;\n      const faceIndexSize = 1;\n\n      const position = new Float32Array(positionSize * vertices * cubeFaces);\n      const uv = new Float32Array(uvSize * vertices * cubeFaces);\n      const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n      for (let face = 0; face < cubeFaces; face++) {\n        const x = (face % 3) * 2 / 3 - 1;\n        const y = face > 2 ? 0 : -1;\n        const coordinates = [\n          [x, y, 0],\n          [x + 2 / 3, y, 0],\n          [x + 2 / 3, y + 1, 0],\n          [x, y, 0],\n          [x + 2 / 3, y + 1, 0],\n          [x, y + 1, 0]\n        ];\n        position.set(\n            ([] as number[]).concat(...coordinates),\n            positionSize * vertices * face);\n        uv.set(uv1, uvSize * vertices * face);\n        const fill = [face, face, face, face, face, face];\n        faceIndex.set(fill, faceIndexSize * vertices * face);\n      }\n      const planes = new BufferGeometry();\n      planes.setAttribute(\n          'position', new BufferAttribute(position, positionSize));\n      planes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n      planes.setAttribute(\n          'faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n      this[$lodPlanes].push(planes);\n\n      if (lod > LOD_MIN) {\n        lod--;\n      }\n    }\n    // Vertices of a dodecahedron (except the opposites, which represent the\n    // same axis), used as axis directions evenly spread on a sphere.\n    this[$axisDirections].push(\n        new Vector3(1, 1, 1),\n        new Vector3(-1, 1, 1),\n        new Vector3(1, 1, -1),\n        new Vector3(-1, 1, -1),\n        new Vector3(0, PHI, -INV_PHI),\n        new Vector3(INV_PHI, 0, PHI),\n        new Vector3(-INV_PHI, 0, PHI),\n        new Vector3(PHI, INV_PHI, 0),\n        new Vector3(-PHI, INV_PHI, 0));\n  }\n\n  /**\n   * Generates a PMREM from our default EnvironmentScene, which is a blurry\n   * greyscale room with several boxes on the floor and several lit windows.\n   */\n  fromDefault(): WebGLRenderTarget {\n    const defaultScene = new EnvironmentScene;\n\n    const cubeUVRenderTarget = this[$allocateTargets]();\n    this[$sceneToCubeUV](\n        defaultScene, DEFAULT_NEAR, DEFAULT_FAR, cubeUVRenderTarget);\n    this[$blur](cubeUVRenderTarget, 0, 0, GENERATED_SIGMA);\n    this[$applyPMREM](cubeUVRenderTarget);\n\n    this[$pingPongRenderTarget].dispose();\n    defaultScene.dispose();\n    return cubeUVRenderTarget;\n  }\n\n  /**\n   * Generates a PMREM from a supplied Scene, which can be faster than using an\n   * image if networking bandwidth is low. Optional near and far planes ensure\n   * the scene is rendered in its entirety (the cubeCamera is placed at the\n   * origin).\n   */\n  fromScene(\n      scene: Scene, near: number = DEFAULT_NEAR,\n      far: number = DEFAULT_FAR): WebGLRenderTarget {\n    const cubeUVRenderTarget = this[$allocateTargets]();\n    this[$sceneToCubeUV](scene, near, far, cubeUVRenderTarget);\n    this[$applyPMREM](cubeUVRenderTarget);\n\n    this[$pingPongRenderTarget].dispose();\n    return cubeUVRenderTarget;\n  }\n\n  /**\n   * Generates a PMREM from an equirectangular texture, which can be either LDR\n   * (RGBFormat) or HDR (RGBEFormat).\n   */\n  fromEquirectangular(equirectangular: Texture): WebGLRenderTarget {\n    equirectangular.magFilter = NearestFilter;\n    equirectangular.minFilter = NearestFilter;\n    equirectangular.generateMipmaps = false;\n\n    const cubeUVRenderTarget = this[$allocateTargets](equirectangular);\n    this[$equirectangularToCubeUV](equirectangular, cubeUVRenderTarget);\n    this[$applyPMREM](cubeUVRenderTarget);\n\n    this[$pingPongRenderTarget].dispose();\n    return cubeUVRenderTarget;\n  }\n\n  private[$allocateTargets](equirectangular?: Texture): WebGLRenderTarget {\n    const params = {\n      magFilter: NearestFilter,\n      minFilter: NearestFilter,\n      generateMipmaps: false,\n      type: equirectangular ? equirectangular.type : UnsignedByteType,\n      format: equirectangular ? equirectangular.format : RGBEFormat,\n      encoding: equirectangular ? equirectangular.encoding : RGBEEncoding,\n      depthBuffer: false,\n      stencilBuffer: false\n    };\n    const cubeUVRenderTarget = this[$createRenderTarget](\n        {...params, depthBuffer: (equirectangular ? false : true)});\n    this[$pingPongRenderTarget] = this[$createRenderTarget](params);\n    return cubeUVRenderTarget;\n  }\n\n  private[$sceneToCubeUV](\n      scene: Scene, near: number, far: number,\n      cubeUVRenderTarget: WebGLRenderTarget) {\n    const fov = 90;\n    const aspect = 1;\n    const cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n    const upSign = [1, 1, 1, 1, -1, 1];\n    const forwardSign = [1, 1, -1, -1, -1, 1];\n\n    const gammaOutput = this.threeRenderer.gammaOutput;\n    const toneMapping = this.threeRenderer.toneMapping;\n    const toneMappingExposure = this.threeRenderer.toneMappingExposure;\n\n    this.threeRenderer.toneMapping = LinearToneMapping;\n    this.threeRenderer.toneMappingExposure = 1.0;\n    this.threeRenderer.gammaOutput = false;\n    scene.scale.z *= -1;\n\n    this.threeRenderer.setRenderTarget(cubeUVRenderTarget);\n    for (let i = 0; i < 6; i++) {\n      const col = i % 3;\n      if (col == 0) {\n        cubeCamera.up.set(0, upSign[i], 0);\n        cubeCamera.lookAt(forwardSign[i], 0, 0);\n      } else if (col == 1) {\n        cubeCamera.up.set(0, 0, upSign[i]);\n        cubeCamera.lookAt(0, forwardSign[i], 0);\n      } else {\n        cubeCamera.up.set(0, upSign[i], 0);\n        cubeCamera.lookAt(0, 0, forwardSign[i]);\n      }\n      this[$setViewport](\n          col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n      this.threeRenderer.render(scene, cubeCamera);\n    }\n\n    this.threeRenderer.toneMapping = toneMapping;\n    this.threeRenderer.toneMappingExposure = toneMappingExposure;\n    this.threeRenderer.gammaOutput = gammaOutput;\n    scene.scale.z *= -1;\n  }\n\n  private[$equirectangularToCubeUV](\n      equirectangular: Texture, cubeUVRenderTarget: WebGLRenderTarget) {\n    const scene = new Scene();\n    scene.add(new Mesh(this[$lodPlanes][0], this[$blurMaterial]));\n    const uniforms = this[$blurMaterial].uniforms;\n\n    uniforms['envMap'].value = equirectangular;\n    uniforms['copyEquirectangular'].value = true;\n    uniforms['texelSize'].value.set(\n        1.0 / equirectangular.image.width, 1.0 / equirectangular.image.height);\n    uniforms['inputEncoding'].value = encodings[equirectangular.encoding];\n    uniforms['outputEncoding'].value = encodings[equirectangular.encoding];\n\n    this.threeRenderer.setRenderTarget(cubeUVRenderTarget);\n    this[$setViewport](0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n    this.threeRenderer.render(scene, this[$flatCamera]);\n  }\n\n  private[$createRenderTarget](params: Object): WebGLRenderTarget {\n    const cubeUVRenderTarget =\n        new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n    cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n    cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n    return cubeUVRenderTarget;\n  }\n\n  private[$setViewport](x: number, y: number, width: number, height: number) {\n    const dpr = this.threeRenderer.getPixelRatio();\n    this.threeRenderer.setViewport(x / dpr, y / dpr, width / dpr, height / dpr);\n  }\n\n  private[$applyPMREM](cubeUVRenderTarget: WebGLRenderTarget) {\n    for (let i = 1; i < TOTAL_LODS; i++) {\n      const sigma = Math.sqrt(\n          this[$sigma][i] * this[$sigma][i] -\n          this[$sigma][i - 1] * this[$sigma][i - 1]);\n      const poleAxis =\n          this[$axisDirections][(i - 1) % this[$axisDirections].length];\n      this[$blur](cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n    }\n  }\n\n  /**\n   * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n   * vertically and horizontally, but this breaks down on a cube. Here we apply\n   * the blur latitudinally (around the poles), and then longitudinally (towards\n   * the poles) to approximate the orthogonally-separable blur. It is least\n   * accurate at the poles, but still does a decent job.\n   */\n  private[$blur](\n      cubeUVRenderTarget: WebGLRenderTarget, lodIn: number, lodOut: number,\n      sigma: number, poleAxis?: Vector3) {\n    this[$halfBlur](\n        cubeUVRenderTarget,\n        this[$pingPongRenderTarget],\n        lodIn,\n        lodOut,\n        sigma,\n        'latitudinal',\n        poleAxis);\n\n    this[$halfBlur](\n        this[$pingPongRenderTarget],\n        cubeUVRenderTarget,\n        lodOut,\n        lodOut,\n        sigma,\n        'longitudinal',\n        poleAxis);\n  }\n\n  private[$halfBlur](\n      targetIn: WebGLRenderTarget, targetOut: WebGLRenderTarget, lodIn: number,\n      lodOut: number, sigmaRadians: number, direction: string,\n      poleAxis?: Vector3) {\n    if (direction !== 'latitudinal' && direction !== 'longitudinal') {\n      console.error(\n          'blur direction must be either latitudinal or longitudinal!');\n    }\n\n    const blurScene = new Scene();\n    blurScene.add(new Mesh(this[$lodPlanes][lodOut], this[$blurMaterial]));\n    const blurUniforms = this[$blurMaterial].uniforms;\n\n    const pixels = this[$sizeLod][lodIn] - 1;\n    const radiansPerPixel = isFinite(sigmaRadians) ?\n        Math.PI / (2 * pixels) :\n        2 * Math.PI / (2 * MAX_SAMPLES - 1);\n    const sigmaPixels = sigmaRadians / radiansPerPixel;\n    const samples = isFinite(sigmaRadians) ?\n        1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) :\n        MAX_SAMPLES;\n\n    if (samples > MAX_SAMPLES) {\n      console.warn(`sigmaRadians, ${\n          sigmaRadians}, is too large and will clip, as it requested ${\n          samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n    }\n\n    let weights = [];\n    let sum = 0;\n    for (let i = 0; i < MAX_SAMPLES; ++i) {\n      const x = i / sigmaPixels;\n      const weight = Math.exp(-x * x / 2);\n      weights.push(weight);\n      if (i == 0) {\n        sum += weight;\n      } else if (i < samples) {\n        sum += 2 * weight;\n      }\n    }\n    weights = weights.map(w => w / sum);\n\n    blurUniforms['envMap'].value = targetIn.texture;\n    blurUniforms['copyEquirectangular'].value = false;\n    blurUniforms['samples'].value = samples;\n    blurUniforms['weights'].value = weights;\n    blurUniforms['latitudinal'].value = direction === 'latitudinal';\n    if (poleAxis) {\n      blurUniforms['poleAxis'].value = poleAxis;\n    }\n    blurUniforms['dTheta'].value = radiansPerPixel;\n    blurUniforms['mipInt'].value = LOD_MAX - lodIn;\n    blurUniforms['inputEncoding'].value = encodings[targetIn.texture.encoding];\n    blurUniforms['outputEncoding'].value = encodings[targetIn.texture.encoding];\n\n    const outputSize = this[$sizeLod][lodOut];\n    const x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n    const y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) +\n        2 * outputSize *\n            (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n    this.threeRenderer.autoClear = false;\n\n    this.threeRenderer.setRenderTarget(targetOut);\n    this[$setViewport](x, y, 3 * outputSize, 2 * outputSize);\n    this.threeRenderer.render(blurScene, this[$flatCamera]);\n  }\n};\n\n\nclass BlurMaterial extends RawShaderMaterial {\n  constructor(maxSamples: number) {\n    const weights = new Float32Array(maxSamples);\n    const texelSize = new Vector2(1, 1);\n    const poleAxis = new Vector3(0, 1, 0);\n\n    super({\n\n      defines: {'n': maxSamples},\n\n      uniforms: {\n        'envMap': {value: null},\n        'copyEquirectangular': {value: false},\n        'texelSize': {value: texelSize},\n        'samples': {value: 1},\n        'weights': {value: weights},\n        'latitudinal': {value: false},\n        'dTheta': {value: 0},\n        'mipInt': {value: 0},\n        'poleAxis': {value: poleAxis},\n        'inputEncoding': {value: encodings[LinearEncoding]},\n        'outputEncoding': {value: encodings[LinearEncoding]}\n      },\n\n      vertexShader: `\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;\nvarying vec3 vOutputDirection;\n${getDirectionChunk}\nvoid main() {\n    vOutputDirection = getDirection(uv, faceIndex);\n    gl_Position = vec4( position, 1.0 );\n}\n      `,\n\n      fragmentShader: `\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform bool copyEquirectangular;\nuniform vec2 texelSize;\nuniform int samples;\nuniform float weights[n];\nuniform bool latitudinal;\nuniform float dTheta;\nuniform float mipInt;\nuniform vec3 poleAxis;\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n${texelIO} \nvec4 envMapTexelToLinear(vec4 color) {\n  return inputTexelToLinear(color);\n}\n${bilinearCubeUVChunk}\nvoid main() {\n  gl_FragColor = vec4(0.0);\n  if (copyEquirectangular) {\n    vec3 direction = normalize(vOutputDirection);\n    vec2 uv;\n    uv.y = asin(clamp(direction.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\n    uv.x = atan(direction.z, direction.x) * RECIPROCAL_PI2 + 0.5;\n    vec2 f = fract(uv / texelSize - 0.5);\n    uv -= f * texelSize;\n    vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n    uv.x += texelSize.x;\n    vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n    uv.y += texelSize.y;\n    vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n    uv.x -= texelSize.x;\n    vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n    vec3 tm = mix(tl, tr, f.x);\n    vec3 bm = mix(bl, br, f.x);\n    gl_FragColor.rgb = mix(tm, bm, f.y);\n  } else {\n    for (int i = 0; i < n; i++) {\n      if (i >= samples)\n        break;\n      for (int dir = -1; dir < 2; dir += 2) {\n        if (i == 0 && dir == 1)\n          continue;\n        vec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\n        if (all(equal(axis, vec3(0.0))))\n          axis = cross(vec3(0.0, 1.0, 0.0), vOutputDirection);\n        axis = normalize(axis);\n        float theta = dTheta * float(dir * i);\n        float cosTheta = cos(theta);\n        // Rodrigues' axis-angle rotation\n        vec3 sampleDirection = vOutputDirection * cosTheta \n            + cross(axis, vOutputDirection) * sin(theta) \n            + axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\n        gl_FragColor.rgb +=\n            weights[i] * bilinearCubeUV(envMap, sampleDirection, mipInt);\n      }\n    }\n  }\n  gl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n      `,\n\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false\n    });\n\n    this.type = 'GaussianBlur';\n  }\n}\n"]}